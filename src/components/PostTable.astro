---
import type { CollectionEntry } from "astro:content";

export interface Props {
  posts: CollectionEntry<"blog">[];
  lang: "es" | "en";
}

const { posts, lang } = Astro.props;

function groupPostsByYear(posts: CollectionEntry<"blog">[]) {
  return posts.reduce(
    (acc, post) => {
      const year = new Date(post.data.pubDate).getFullYear();
      if (!acc[year]) acc[year] = [];
      acc[year].push(post);
      return acc;
    },
    {} as Record<number, CollectionEntry<"blog">[]>
  );
}

const groupedPosts = groupPostsByYear(
  posts
    .filter((post) => !post.data.draft)
    .filter((post) => post.data.lang === lang)
);
---

<section>
  <div class="post-table">
    <div class="table-header">
      <span class="col-date"></span>
      <span class="col-title">título</span>
      <span class="col-subtitulo">subtitulo</span>
      <span class="col-tag">tag</span>
    </div>

    {
      Object.entries(groupedPosts)
        .sort((a, b) => Number(b[0]) - Number(a[0]))
        .map(([year, posts]) =>
          posts.map((post, idx) => (
            <a href={`/blog/${post.id}`} class="table-row">
              <span class="col-date">{idx === 0 ? year : ""}</span>
              <span class="col-title">{post.data.title}</span>
              <span class="col-subtitle">- {post.data.description}</span>
              <span class="col-topic">{post.data.topic ?? "—"}</span>
            </a>
          ))
        )
    }
  </div>
</section>

<style>
  section {
    font-size: 14px;
  }

  .post-table {
    width: 100%;
    color: var(--font-color-normal);
  }

  .table-header {
    display: grid;
    grid-template-columns: 50px 120px 3fr 1fr;
    align-items: center;
    gap: 0.5rem;
    padding: 6px 0 10px 0;
    color: var(--font-color-normal);
    border-bottom: 1px solid var(--border-color);
    text-transform: lowercase;
  }

  .table-row {
    display: grid;
    grid-template-columns: 50px 120px 3fr 1fr;
    align-items: center;
    gap: 0.5rem;
    padding: 15px 0;
    border-top: 1px solid var(--boder-color);
    transition: background-color 0.15s ease;

    text-decoration: none;
    color: inherit;
  }

  .table-row:last-child {
    border-bottom: 1px solid var(--boder-color);
  }

  .table-row:hover {
    background: var(--background-hover);
  }

  .post-title {
    text-decoration: none;
    color: inherit;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .col-date {
    text-align: center;
  }

  .col-date-string {
    color: var(--font-color-normal);
  }

  .col-topic {
    color: var(--font-color-normal);
  }

  .col-title,
  .col-subtitle {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
    overflow: hidden;
  }

  .table-row[data-indented="true"] {
    grid-template-columns: 0px 1fr 140px 90px;
    padding-left: 56px;
  }

  .table-row[data-indented="true"] .col-date {
    display: none;
  }

  @media (max-width: 780px) {
    .table-header,
    .table-row {
      grid-template-columns: 50px 1fr 130px 80px;
    }
    .table-row > * {
      min-width: 0;
    }
    .table-row[data-indented="true"] {
      padding-left: 50px;
    }
  }

  @media (max-width: 560px) {
    .table-header,
    .table-row {
      grid-template-columns: 50px 1fr 90px;
    }
    .col-topic {
      display: none;
    }
    .table-row[data-indented="true"] {
      grid-template-columns: 0px 1fr 90px;
    }
  }
</style>
